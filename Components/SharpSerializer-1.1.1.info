{"Name":"SharpSerializer","Id":1350,"Alias":"SharpSerializer","Description":"# Details #\r\n\r\nSharpSerializer fast XML and binary serialization (serialization library) for:\r\n\r\n* \tBinary and\r\n*\tXml\r\n\r\n## Serialization ##\r\n\r\nSharpSerializer offers high performance Xml and binary serialization of the user business\r\nlogic objects (POCOs, plain old c# objects). No additional Attributes are required.\r\n\r\nFollowing code snippets show Xml and binary serialization and deserialization of the \r\nsimple Person object (included in the Samples). \r\n\r\n\r\n```csharp\r\n\t\tpublic static void SerializeSharpSerializerBinary(Person p)\r\n\t\t{\r\n\t\t\t// create instance of sharpSerializer\r\n\t\t\t// true - binary serialization, false - xml serialization\r\n\t\t\tvar serializer = new Polenter.Serialization.SharpSerializer(true);\r\n\r\n\t\t\t// serialize\r\n\t\t\tserializer.Serialize(p, \"Person.SharpSerializer.bin\");\r\n\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t/// \u003csummary\u003e\r\n\t\t/// \r\n\t\t/// \u003c/summary\u003e\r\n\t\t/// \u003cparam name=\"p\"\u003e\u003c/param\u003e\r\n\t\tpublic static void SerializeSharpSerializerXml(Person p)\r\n\t\t{\r\n\t\t\t// create instance of sharpSerializer\r\n\t\t\t// true - binary serialization, false - xml serialization\r\n\t\t\tvar serializer = new Polenter.Serialization.SharpSerializer(false);\r\n\r\n\t\t\t// serialize\r\n\t\t\tserializer.Serialize(p, \"Person.SharpSerializer.xml\");\r\n\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\r\n\t\tpublic static Person DeserializeSharpSerializerBinary()\r\n\t\t{\r\n\t\t\tPerson p = default(Person);\r\n\r\n\t\t\t// create instance of sharpSerializer\r\n\t\t\t// true - binary serialization, false - xml serialization\r\n\t\t\tvar serializer = new Polenter.Serialization.SharpSerializer(true);\r\n\r\n\t\t\t// deserialize\r\n\t\t\tp = (Person) serializer.Deserialize(\"Person.SharpSerializer.bin\");\r\n\r\n\t\t\treturn p;\r\n\t\t}\r\n\r\n\t\tpublic static Person DeserializeSharpSerializerXml()\r\n\t\t{\r\n\t\t\tPerson p = default(Person);\r\n\r\n\t\t\t// create instance of sharpSerializer\r\n\t\t\t// true - binary serialization, false - xml serialization\r\n\t\t\tvar serializer = new Polenter.Serialization.SharpSerializer(false);\r\n\r\n\t\t\t// deserialize\r\n\t\t\tp = (Person)serializer.Deserialize(\"Person.SharpSerializer.xml\");\r\n\r\n\t\t\treturn p;\r\n\t\t}\r\n\r\n```\r\n\r\nMore details can be found in original (desktop sample by Polenter).\r\n\r\n*\t[http://www.sharpserializer.com/en/tutorial/](http://www.sharpserializer.com/en/tutorial/)\r\n\r\n\r\nCross-platform port by HolisticWare team:\r\n\r\n* \t[http://holisticware.net](http://holisticware.net)\r\n\r\n\r\n\r\n","Version":"1.1.1","Summary":"SharpSerializer Xamarin component ported by HolisticWare","QuickStart":"# Getting Started #\r\n\r\n\r\nSharpSerializer fast XML and binary serialization by Polenter\r\n\r\n\r\n* \tXamarin.iOS\r\n* \tXamarin.Android\r\n\r\nCross-platform port by HolisticWare.\r\n\r\n\r\n\r\n## Hello world with xml serialization ##\r\n\r\nThe easiest way to use sharpSerializer is to instantiate it with its standard constructor. \r\nOut of the box sharpSerializer serializes to Xml.\r\n\r\n\r\n```csharp\r\n\t\t// create fake obj\r\n\t\tvar obj = createFakeObject();\r\n\r\n\t\t// create instance of sharpSerializer\r\n\t\t// with standard constructor it serializes to xml\r\n\t\tvar serializer = new SharpSerializer();\r\n\r\n\t\t// serialize\r\n\t\tserializer.Serialize(obj, \"test.xml\");\r\n\r\n\t\t// deserialize\r\n\t\tvar obj2 = serializer.Deserialize(\"test.xml\");\r\n```\r\n\r\n\r\n## Hello world with binary serialization ##\r\n\r\nTo activate binary serialization you need to use overloaded constructor.\r\n\r\n```csharp\r\n\r\n\t\t// create fake obj\r\n\t\tvar obj = createFakeObject();\r\n\r\n\t\t// create instance of sharpSerializer\r\n\t\t// true - binary serialization, false - xml serialization\r\n\t\tvar serializer = new SharpSerializer(true);\r\n\r\n\t\t// serialize\r\n\t\tserializer.Serialize(obj, \"test.bin\");\r\n\r\n\t\t// deserialize\r\n\t\tvar obj2 = serializer.Deserialize(\"test.bin\");\r\n```\r\n\r\n\r\n\r\n## Different modes of the binary serialization ##\r\n\r\nThere are two modes of binary serialization: SizeOptimized and Burst.\r\n\r\nWhat is the difference?\r\nTo successfully restore an object tree from the serialized stream, all objects \r\nmust be serialized including their type information. Both modes differ in the \r\nart the type information is stored.\r\n\r\n### BinarySerializationMode.Burst ###\r\n\r\nIn the burst mode, type of every object is serialized as part of this object. \r\nIt doesn\u0027t matter if all serialized objects are of the same type, their types are\r\nserialized as many times, as many objects. Type information is duplicated. It increases \r\nthe file size especially when serializing listings of items of the same type (collections, \r\narrays, dictionaries). This mode is recommended only for serializing of single, simple \r\nobjects. It has small overhead and no extended logic. BurstBinaryWriter supports this \r\nmode.\r\n\r\n```csharp\r\n\t\t// create sharpSerializer in the burst binary mode\r\n\t\t// overloaded constructor of SharpSerializerBinarySettings accepts one value from the enumeration BinarySerializationMode\r\n\t\tvar settings = new SharpSerializerBinarySettings(BinarySerializationMode.Burst);\r\n\t\tvar burstSerializer = new SharpSerializer(settings);\r\n\r\n```\r\n\r\n### BinarySerializationMode.SizeOptimized (the default one) ###\r\n\r\nIn the SizeOptimized mode all types are gathered in a list which is stored in the \r\nfile header. All type duplicates are removed. Serialized objects refer only to this \r\nlist using index of the correlated type. It\u0027s recommended approach for serializing of \r\ncomplex objects with many properties, or serializing of listings. The drawback is - \r\nserialized objects must be at first analysed, then their types are cached in the list, \r\nduplicates are removed, type indexes are estimated and injected back to the objects. \r\nFinally the data is written to stream.\r\nApart from types, the same optimization is applied to property names. \r\nSizeOptimizedBinaryWriter supports this mode.\r\n\r\n```csharp\r\n\t// create sharpSerializer in the size optimized binary mode - Default\r\n\t// overloaded constructor accepts bool value. If true then binary serialization, if false - xml\r\n\tvar sizeOptimizedSerializer1 = new SharpSerializer(true);\r\n\r\n\t// or with the same usage as for the burst mode\r\n\tvar settings = new SharpSerializerBinarySettings(BinarySerializationMode.SizeOptimized);\r\n\tvar sizeOptimizedSerializer2 = new SharpSerializer(settings);\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n## Using custom serializer and custom deserializer ##\r\n\r\n### Creating Serializer ###\r\n\r\nThe namespace Polenter.Serialization.Advanced contains some classes which are \r\nindispensable during serialization.\r\n\r\n#### XmlPropertySerializer ####\r\n\r\nserializes objects into a tree oriented structure, where every element has its beginning \r\nand end. XmlPropertySerializer is not responsible for serializing to xml. Instead it uses \r\nan instance of IXmlWriter to access the serialization stream.\r\n\r\nDefaultXmlWriter implements IXmlWriter and contains the build in .NET XmlWriter which is \r\nresponsible for writing to a stream.\r\n\r\nTo make your own tree oriented writer, you make a class which implements IXmlWriter\r\n\r\n```csharp\r\n\tPolenter.Serialization.Advanced.Xml.IXmlWriter\r\n\t\t\t\t  jsonWriter = new MyJsonWriter();\r\n\r\n```\r\n\r\n\r\nthis writer is passed to the constructor of the XmlPropertySerializer\r\n\r\n```csharp\r\nPolenter.Serialization.Advanced.Serializing.IPropertySerializer \r\n\t\t\t\t  serializer = new Polenter.Serialization.Advanced.XmlPropertySerializer(jsonWriter);\r\n```\r\n\r\nwith this strategy pattern, the default XmlPropertySerializer can store data \r\nin any format which is tree oriented (contains begin/end tags)\r\n\r\n\r\n#### BinaryPropertySerializer ####\r\n\r\nserializes objects into elements with known length and fixed position in the stream. \r\nIt doesn\u0027t write directly to the stream. Instead, it uses an instance of IBinaryWriter.\r\n\r\nActually there are two writers used by the SharpSerializer: BurstBinaryWriter and \r\nSizeOptimizedBinaryWriter\r\n\r\nTo make your own binary writer you make a class which implements IBinaryWriter.\r\n\r\n```csharp\r\nPolenter.Serialization.Advanced.Binary.IBinaryWriter \r\n\t\t\t\t  compressedWriter = new MyVeryStrongCompressedAndEncryptedBinaryWriter();\r\n```\r\nthis writer is passed to the constructor of the BinaryPropertySerializer\r\n\r\n```csharp\r\n\t\tserializer = new Polenter.Serialization.Advanced.BinaryPropertySerializer(compressedWriter);\r\n```\r\n\r\n\r\n\r\n### Creating Deserializer ###\r\n\r\nThe namespace Polenter.Serialization.Advanced contains classes which are counterparts \r\nof the above serializers/writers:\r\n\r\n\r\n\r\n*\tXmlPropertySerializer\tXmlPropertyDeserializer\r\n*\tDefaultXmlWriter\tDefaultXmlReader\r\n*\tBurstBinaryWriter\tBurstBinaryReader\r\n*\tSizeOptimizedBinaryWriter\tSizeOptimizedBinaryReader\r\n\r\n\r\n\r\nSyntax of creating Deserializers/Readers is analog to creating the Serializers/Writers, i.e.\r\n\r\n```csharp\r\n\tPolenter.Serialization.Advanced.Binary.IBinaryReader\r\n\t\t\t\t compressedReader = new MyVeryStrongCompressedAndEncryptedBinaryReader();\r\n\r\n\tPolenter.Serialization.Advanced.Deserializing.IPropertyDeserializer\r\n\t\t\t\t  deserializer = new Polenter.Serialization.Advanced.BinaryPropertyDeserializer(compressedReader);\r\n```\r\n\r\n\r\n### Overriding the default Serializer and Deserializer ###\r\n\r\nThe last step is creating SharpSerializer with an overloaded constructor\r\n\r\n```csharp\r\n\tvar sharpSerializer = new SharpSerializer(serializer, deserializer);\r\n```\r\n\r\nChanging only reader and writer in fixed serializer and deserializer is very easy extensibility \r\nmodel allowing serialization to/from almost any data format.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n## More samples ##\r\n\r\n```csharp\r\n\t\tpublic static void SerializeSharpSerializerBinary(Person p)\r\n\t\t{\r\n\t\t\t// create instance of sharpSerializer\r\n\t\t\t// true - binary serialization, false - xml serialization\r\n\t\t\tvar serializer = new Polenter.Serialization.SharpSerializer(true);\r\n\r\n\t\t\t// serialize\r\n\t\t\tserializer.Serialize(p, \"Person.SharpSerializer.bin\");\r\n\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t/// \u003csummary\u003e\r\n\t\t/// \r\n\t\t/// \u003c/summary\u003e\r\n\t\t/// \u003cparam name=\"p\"\u003e\u003c/param\u003e\r\n\t\tpublic static void SerializeSharpSerializerXml(Person p)\r\n\t\t{\r\n\t\t\t// create instance of sharpSerializer\r\n\t\t\t// true - binary serialization, false - xml serialization\r\n\t\t\tvar serializer = new Polenter.Serialization.SharpSerializer(false);\r\n\r\n\t\t\t// serialize\r\n\t\t\tserializer.Serialize(p, \"Person.SharpSerializer.xml\");\r\n\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\r\n\t\tpublic static Person DeserializeSharpSerializerBinary()\r\n\t\t{\r\n\t\t\tPerson p = default(Person);\r\n\r\n\t\t\t// create instance of sharpSerializer\r\n\t\t\t// true - binary serialization, false - xml serialization\r\n\t\t\tvar serializer = new Polenter.Serialization.SharpSerializer(true);\r\n\r\n\t\t\t// deserialize\r\n\t\t\tp = (Person) serializer.Deserialize(\"Person.SharpSerializer.bin\");\r\n\r\n\t\t\treturn p;\r\n\t\t}\r\n\r\n\t\tpublic static Person DeserializeSharpSerializerXml()\r\n\t\t{\r\n\t\t\tPerson p = default(Person);\r\n\r\n\t\t\t// create instance of sharpSerializer\r\n\t\t\t// true - binary serialization, false - xml serialization\r\n\t\t\tvar serializer = new Polenter.Serialization.SharpSerializer(false);\r\n\r\n\t\t\t// deserialize\r\n\t\t\tp = (Person)serializer.Deserialize(\"Person.SharpSerializer.xml\");\r\n\r\n\t\t\treturn p;\r\n\t\t}\r\n\r\n```\r\n\r\n## Other Resources ##\r\n\r\n* \t[http://sharpserializer.codeplex.com](http://sharpserializer.codeplex.com)\r\n* \t[http://www.sharpserializer.com](http://www.sharpserializer.com)\r\n* \t[http://holisticware.net](http://holisticware.net)\r\n","Hash":"f9c6913f1e7884696109c7b5ac997f5a","TargetPlatforms":["ios","ios-unified","android"],"TrialHash":null}